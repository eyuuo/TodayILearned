1. JSON Token 정보 출력
void printall(const char *json, jsmntok_t *t, int tokcount) 함수 사용

1) 동작: 파싱한 모든 토큰(1~) 의 구조체 정보를 출력합니다.
2) 파라미터: json - 읽혀진 json string, t - 파싱 토큰배열, tokcount - 토큰 갯수

// 함수 코드 본문

void printall(const char *json, jsmntok_t *t, int tokcount)

{
  int i;

  printf("***** All Tokens *****\n");

  for (i = 1; i < tokcount; i ++ ) {
    char * type = malloc(20 * sizeof(char));
    int j, k;

    if (t[i].type == 1)
      type = "JSMN_OBJECT";
    else if (t[i].type == 2)
      type = "JSMN_ARRAY";
    else if (t[i].type == 3)
      type = "JSMN_STRING";
    else if (t[i].type == 4)
      type = "JSMN_PRIMITIVE";
    else
      type = "UNDEFINED";

    // We expect the contents of one token is less then 200 chars
    char * subString = (char *) malloc(200*sizeof(char));
    // Initialize subString
    for(j = 0; j < 200; j ++)
      subString[j] = '\0';
    
    for(j = t[i].start; j < t[i].end; j ++) 
      subString[j - t[i].start] = json[j];

    subString[j] = '\0';

    printf("[%2d] %s (size=%d, %d~%d, %s)\n", i, subString, t[i].size, t[i].start, t[i].end, type); 
    
    free(subString);
  }
  printf("\n");
}


2. JSON Keys 출력
void printkeys(const char *json, jsmntok_t *t, int tokcount) 함수 사용

1) 동작: 파싱한 모든 토큰들 중 키가 되는 토큰만 출력합니다. (내용, 번호)
2) 파라미터: json - 읽혀진 json string, t - 파싱 토큰배열, tokcount - 토큰 갯수

// 함수 코드 본문

void printkeys(const char *json, jsmntok_t *t, int tokcount)
{
  int i;
  int count = 1;

  printf("***** All Keys *****\n");

  for (i = 1; i < tokcount; i ++ ) {
    char * type = malloc(20 * sizeof(char));
    int j, k;

    if(t[i].size == 0)
      continue;
    else if(t[i].type != 3)
      continue;

    if (t[i].type == 1)
      type = "JSMN_OBJECT";
    else if (t[i].type == 2)
      type = "JSMN_ARRAY";
    else if (t[i].type == 3)
      type = "JSMN_STRING";
    else if (t[i].type == 4)
      type = "JSMN_PRIMITIVE";
    else
      type = "UNDEFINED";

    // We expect the contents of one token is less then 200 chars
    char * subString = (char *) malloc(200*sizeof(char));
    // Initialize subString
    for(j = 0; j < 200; j ++)
      subString[j] = '\0';
    
    for(j = t[i].start; j < t[i].end; j ++) 
      subString[j - t[i].start] = json[j];

    subString[j] = '\0';

    printf("[%2d] %s (%d)\n", count++, subString, i); 
    
    free(subString);
  }
  printf("\n");
}


3. JSON Key Token Array 찾기
int findkeys(const char *json, jsmntok_t *t, int tokcount, int *keys) 함수 사용

1) 동작: 파싱한 모든 토큰들 중에서 키가 되는 토큰만 찾아 토큰 번호를 정수 배열에 저장한다.
2) 파라미터: json - 읽혀진 json string, t - 파싱 토큰배열, tokcount - 토큰 갯수, keys - 저장할 토큰번호의 배열 포인터
3) 리턴값: 저장된 키 토큰번호의 갯수

// 함수 코드 본문

int findkeys(const char *json, jsmntok_t *t, int tokcount, int *keys)
{
  int i;
  int count = 0;

  for (i = 1; i < tokcount; i ++ ) {
    if(t[i].size == 0)
      continue;
    else if(t[i].type != 3)
      continue;

    keys[count++] = i;
  }

  return count;
}
